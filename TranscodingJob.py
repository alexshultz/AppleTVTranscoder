import subprocess
import os

class TranscodingJob:
    """
    Manages the transcoding process for a single MediaFile, including
    executing the two-pass encoding with ffmpeg.
    """

    def __init__(self, media_file, max_bitrate=8000):
        self.media_file = media_file
        self.original_bitrate = self.media_file.get_bitrate()  # From MediaFile
        self.max_bitrate = max_bitrate

    def get_original_codec(self):
        """
        Retrieve the codec of the original video file from the MediaFile instance.
        """
        # Assuming MediaFile class has this method implemented
        return self.media_file.get_original_codec()


    def get_target_bitrate(self):
        """
        Calculates an appropriate target bitrate for H.265 encoding.
        Adjusts based on the original codec and applies constraints based on a maximum bitrate.
        """
        # Adjust based on original codec
        if self.original_codec == "h264":
            target_bitrate = int(self.original_bitrate * 2 / 3)
        else:
            target_bitrate = self.original_bitrate

        # Ensure the target bitrate does not exceed the maximum allowed bitrate
        target_bitrate = min(target_bitrate, self.max_bitrate)

        # Optionally, consider if further adjustment is needed if the original bitrate
        # is significantly lower than the max bitrate. This step might depend on content analysis.
        # For example, you might not always want to increase the bitrate unnecessarily.

        return target_bitrate

    def execute(self):
        """
        Executes the two-pass encoding using ffmpeg. This includes both
        the analysis pass and the actual encoding pass.
        """
        # Define the base command for ffmpeg. Note: You might need to adjust paths or add options.
        base_command = [
            "ffmpeg", "-y", "-i", self.media_file.file_path,
            "-c:v", " ", "-preset", "slow",
            "-b:v", "8000k"
        ]

        # First pass: Analysis
        first_pass_cmd = base_command + [
            "-pass", "1",
            "-an",  # Ignore audio for the first pass
            "-f", "null", "/dev/null"
        ]
        subprocess.run(first_pass_cmd, check=True)

        # Second pass: Actual encoding, including audio and subtitles
        second_pass_cmd = base_command + [
            "-pass", "2",
            "-c:a", "copy",  # Copy the audio stream as is; consider re-encoding if necessary
            "-c:s", "copy",
            # Copy the subtitle stream as is; adjust if you have specific subtitle handling requirements
            self.media_file.output_path  # Ensure MediaFile has an attribute `output_path` for the output file
        ]
        subprocess.run(second_pass_cmd, check=True)

        # Clean up passlog files generated by ffmpeg during two-pass encoding
        for passlog_file in ["ffmpeg2pass-0.log", "ffmpeg2pass-0.log.mbtree"]:
            try:
                os.remove(passlog_file)
            except FileNotFoundError:
                pass  # If the file doesn't exist, no action is required
